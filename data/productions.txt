program->declaration_list void ID ( void ) compound_stmt
declaration_list->declaration declaration_list
declaration_list->ε
declaration->type_specifier ID declaration'
declaration->void ID ( params ) compound_stmt
declaration'->var_declaration'
declaration'->( params ) { local_declarations statement_list return expression ; }
var_declaration->type_specifier ID var_declaration'
var_declaration'->;
var_declaration'->[ INTEGER ] ;
type_specifier->int
type_specifier->float
type_specifier->string
params->type_specifier ID param param_list
params->void
param_list->, type_specifier ID param param_list
param_list->ε
param->[ ]
param->ε
compound_stmt->{ local_declarations statement_list return ; }
local_declarations->var_declaration local_declarations
local_declarations->ε
statement_list->statement statement_list
statement_list->ε
statement->ID statement'
statement->{ local_declarations statement_list }
statement->if ( expression ) statement selection_stmt
statement->while ( expression ) statement
statement->return return_stmt
statement->read ID var ;
statement->write expression ;
statement'->var = assignment_stmt
statement'->( args ) ;
assignment_stmt->expression ;
assignment_stmt->STRING ;
selection_stmt->else statement
selection_stmt->ε
return_stmt->;
return_stmt->expression ;
var->[ arithmetic_expression ]
var->ε
expression->arithmetic_expression expression'
expression'->relop arithmetic_expression
expression'->ε
relop-><=
relop-><
relop->>
relop->>=
relop->==
relop->!=
arithmetic_expression->term arithmetic_expression'
arithmetic_expression'->addop term arithmetic_expression'
arithmetic_expression'->ε
addop->+
addop->-
term->factor term'
term'->mulop factor term'
term'->ε
mulop->*
mulop->/
factor->( arithmetic_expression )
factor->ID factor'
factor->num
factor'->[ arithmetic_expression ]
factor'->( args )
factor'->ε
num->INTEGER
num->FLOAT
args->arithmetic_expression arg_list
args->ε
arg_list->, arithmetic_expression arg_list
arg_list->ε