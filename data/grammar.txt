program->declaration_list void ID (void)  { local_declarations statement_list return ; }
declaration_list->declaration declaration_list | ε
declaration-> type_specifier ID var_declaration' | type_specifier ID ( params ) { local_declarations statement_list return factor term' arithmetic_expression' expression' ; } | void ID ( params )  { local_declarations statement_list return ; }
var_declaration'->; | [ INTEGER ] ;
type_specifier->int | float | string
params->type_specifier ID param' param_list' | void
param_list'->, type_specifier ID param' param_list' | ε
param'->[ ] | ε
local_declarations-> type_specifier ID var_declaration' local_declarations | ε
statement_list->statement statement_list | ε
statement->ID var' = assignment_stmt' | call_stmt | { local_declarations statement_list } |  if ( factor term' arithmetic_expression' expression' ) statement selection_stmt' | while ( factor term' arithmetic_expression' expression' ) statement | return return_stmt' |  read ID var' ; | write factor term' arithmetic_expression' expression' ;
assignment_stmt'->factor term' arithmetic_expression' expression' ; | STRING ;
selection_stmt'->else statement | ε
return_stmt'->; | factor term' arithmetic_expression' expression' ;
var'->[ factor term' arithmetic_expression' ] | ε
expression'->relop factor term' arithmetic_expression' | ε
relop-><= | < | > | >= | == | !=
arithmetic_expression'->addop factor term' arithmetic_expression' | ε
addop->+ | -
term'->mulop factor term' | ε
mulop->* | /
factor->( factor term' arithmetic_expression' ) | ID var' | call_stmt | num
num->INTEGER | FLOAT
call_stmt->ID ( factor term' arithmetic_expression' arg_list' ); | ID ();
arg_list'->, factor term' arithmetic_expression' arg_list ' | ε